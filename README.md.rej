--- README.md
+++ README.md
@@ -3,50 +3,92 @@
 ## Prerequisites
 - A C++17-capable compiler (e.g., GCC 9+, Clang 10+, or MSVC 2019+)
 - CMake 3.16 or newer
 - (Optional) Ninja or Make if you prefer those generators
 
 ## Configure & Build (Linux/macOS)
 ```bash
 cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
 cmake --build build
 ```
 The resulting executable will be located at `build/pdf_password_retriever`. Run it with explicit options, for example:
 ```bash
 ./build/pdf_password_retriever --pdf secret.pdf --wordlist passwords.txt
 ```
 
 ## Configure & Build (Windows - x64)
 ```powershell
 cmake -S . -B build -A x64
 cmake --build build --config Release
 ```
 The Release binary will be generated at `build/Release/pdf_password_retriever.exe`. Execute it via PowerShell or CMD:
 ```powershell
 ./build/Release/pdf_password_retriever.exe --pdf secret.pdf --wordlist passwords.txt
 ```
 
+## Applying patches on Windows
+
+Whether you receive a `.patch` file via email or copy one from a pull request, the workflow for
+`git apply` on Windows is the same as on Linux/macOSâ€”the only difference is the shell you run it
+from. Git for Windows installs both **Git Bash** (a Unix-like shell) and the regular `git.exe`
+binary that you can use from PowerShell or CMD. Pick whichever environment you prefer and follow
+these steps:
+
+1. **Save the patch locally.** Download the attachment or paste the contents into a file, for
+   example `fix.patch`.
+2. **Open a shell with Git available.** Use Git Bash, PowerShell, or Command Prompt. If you choose
+   PowerShell/CMD, make sure Git for Windows is installed and its `bin` folder is on your `PATH`.
+3. **Change to the repository root.**
+   ```powershell
+   cd C:\path\to\Unlock-PDF
+   ```
+4. **Dry-run the patch (optional but recommended).** `--check` verifies the patch applies cleanly
+   without modifying your working tree.
+   ```powershell
+   git apply --check ..\downloads\fix.patch
+   ```
+5. **Apply the patch.** Drop `--check` once you are confident it will succeed. The same command
+   works in Git Bash (`/c/Users/.../fix.patch`) or PowerShell (`C:\Users\...\fix.patch`).
+   ```powershell
+   git apply ..\downloads\fix.patch
+   ```
+6. **Review the changes.** Use `git status` and `git diff` before committing.
+
+If the patch was copied to your clipboard, you can pipe it directly into `git apply` without saving
+an intermediate file:
+
+```powershell
+Get-Clipboard | git apply
+```
+
+For Git Bash, replace `Get-Clipboard` with `pbpaste` (if you have it installed) or create a file
+with `cat > fix.patch` and paste the contents manually before pressing <kbd>Ctrl</kbd>+<kbd>D</kbd>.
+
+When a patch fails because your working tree has diverged, try `git apply --reject` to generate
+`.rej` files you can review and merge by hand, or rebase/merge the latest changes before rerunning
+`git apply`.
+
 ## Hardware & Benchmark Utility
 The repository also ships with `device_probe`, a helper that prints basic system information and runs a configurable brute-force
 throughput benchmark. Build it alongside the main tool:
 
 ```bash
 cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
 cmake --build build --target device_probe
 ```
 
 Run the probe with optional flags to tweak the workload:
 
 ```bash
 ./build/device_probe --lengths 6,8,10 --attempts 750000 --hash sha256 --include-special
 ```
 
 To measure your hardware against the real password-check routine, point the probe at an encrypted PDF:
 
 ```bash
 ./build/device_probe --pdf secret.pdf --lengths 6,8 --attempts 2500
 ```
 
 The repository includes `Test1.pdf`, a small encrypted sample you can use to validate the "real" workload:
 
 ```bash
 ./build/device_probe --pdf Test1.pdf --lengths 6,8 --attempts 2500
