#pragma once

#include <cstdint>
#include <vector>
#include <array>

namespace purecrypto {

// AES-256 block cipher (decrypt) and CBC mode with PKCS#7 unpadding

struct Aes256KeySchedule {
	std::array<uint32_t, 60> round_keys; // 4*(Nr+1) with Nr=14 -> 60 words
};

static inline uint8_t xtime(uint8_t x) {
	return static_cast<uint8_t>((x << 1) ^ ((x & 0x80) ? 0x1B : 0x00));
}

static const uint8_t sbox[256] = {
	0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
	0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
	0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
	0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
	0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
	0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
	0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
	0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
	0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
	0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
	0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
	0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
	0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
	0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
	0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
	0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
};

static const uint8_t rsbox[256] = {
	0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,
	0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,
	0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,
	0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,
	0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,
	0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,
	0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,
	0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,
	0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,
	0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,
	0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,
	0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,
	0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,
	0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,
	0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61
};

static const uint32_t rcon[10] = {
	0x01000000U,0x02000000U,0x04000000U,0x08000000U,0x10000000U,
	0x20000000U,0x40000000U,0x80000000U,0x1b000000U,0x36000000U
};

static inline uint32_t subword(uint32_t w) {
	return (uint32_t(sbox[(w >> 24) & 0xFF]) << 24) |
			(uint32_t(sbox[(w >> 16) & 0xFF]) << 16) |
			(uint32_t(sbox[(w >> 8) & 0xFF]) << 8) |
			(uint32_t(sbox[(w >> 0) & 0xFF]));
}

static inline uint32_t rotword(uint32_t w) {
	return (w << 8) | (w >> 24);
}

inline void aes256_key_expansion(Aes256KeySchedule &ks, const uint8_t key[32]) {
	for (int i = 0; i < 8; ++i) {
		ks.round_keys[i] = (uint32_t(key[4*i]) << 24) | (uint32_t(key[4*i+1]) << 16) |
				(uint32_t(key[4*i+2]) << 8) | (uint32_t(key[4*i+3]));
	}
	int i = 8; int rci = 0;
	while (i < 60) {
		uint32_t temp = ks.round_keys[i-1];
		if (i % 8 == 0) {
			temp = subword(rotword(temp)) ^ rcon[rci++];
		} else if (i % 8 == 4) {
			temp = subword(temp);
		}
		ks.round_keys[i] = ks.round_keys[i-8] ^ temp;
		++i;
	}
}

static inline uint8_t mul(uint8_t a, uint8_t b) {
	uint8_t p = 0;
	for (int i = 0; i < 8; ++i) {
		if (b & 1) p ^= a;
		uint8_t hi = a & 0x80;
		a <<= 1;
		if (hi) a ^= 0x1b;
		b >>= 1;
	}
	return p;
}

inline void inv_mix_columns(uint8_t state[16]) {
	for (int c = 0; c < 4; ++c) {
		int i = 4*c;
		uint8_t s0 = state[i+0], s1 = state[i+1], s2 = state[i+2], s3 = state[i+3];
		state[i+0] = mul(0x0e,s0) ^ mul(0x0b,s1) ^ mul(0x0d,s2) ^ mul(0x09,s3);
		state[i+1] = mul(0x09,s0) ^ mul(0x0e,s1) ^ mul(0x0b,s2) ^ mul(0x0d,s3);
		state[i+2] = mul(0x0d,s0) ^ mul(0x09,s1) ^ mul(0x0e,s2) ^ mul(0x0b,s3);
		state[i+3] = mul(0x0b,s0) ^ mul(0x0d,s1) ^ mul(0x09,s2) ^ mul(0x0e,s3);
	}
}

inline void add_round_key(uint8_t state[16], const uint32_t* rk) {
	for (int c = 0; c < 4; ++c) {
		uint32_t k = rk[c];
		state[4*c+0] ^= (k >> 24) & 0xFF;
		state[4*c+1] ^= (k >> 16) & 0xFF;
		state[4*c+2] ^= (k >> 8) & 0xFF;
		state[4*c+3] ^= (k >> 0) & 0xFF;
	}
}

inline void inv_shift_rows(uint8_t s[16]) {
	uint8_t t;
	// row 1: shift right 1
	t = s[13]; s[13] = s[9]; s[9] = s[5]; s[5] = s[1]; s[1] = t;
	// row 2: shift right 2
	uint8_t t0 = s[2], t1 = s[6]; s[2] = s[10]; s[6] = s[14]; s[10] = t0; s[14] = t1;
	// row 3: shift right 3
	t = s[3]; s[3] = s[7]; s[7] = s[11]; s[11] = s[15]; s[15] = t;
}

inline void inv_sub_bytes(uint8_t s[16]) {
	for (int i = 0; i < 16; ++i) s[i] = rsbox[s[i]];
}

inline void aes256_decrypt_block(const Aes256KeySchedule &ks, const uint8_t in[16], uint8_t out[16]) {
	uint8_t state[16];
	for (int i = 0; i < 16; ++i) state[i] = in[i];
	const int Nr = 14;
	add_round_key(state, &ks.round_keys[4*Nr]);
	for (int round = Nr-1; round >= 1; --round) {
		inv_shift_rows(state);
		inv_sub_bytes(state);
		add_round_key(state, &ks.round_keys[4*round]);
		inv_mix_columns(state);
	}
	inv_shift_rows(state);
	inv_sub_bytes(state);
	add_round_key(state, &ks.round_keys[0]);
	for (int i = 0; i < 16; ++i) out[i] = state[i];
}

inline bool aes256_cbc_decrypt(const std::vector<unsigned char>& key,
							 const std::vector<unsigned char>& iv,
							 const std::vector<unsigned char>& ciphertext,
							 std::vector<unsigned char>& plaintext) {
	if (key.size() != 32 || iv.size() != 16 || ciphertext.size() == 0 || (ciphertext.size() % 16) != 0) return false;
	Aes256KeySchedule ks; aes256_key_expansion(ks, reinterpret_cast<const uint8_t*>(key.data()));
	plaintext.resize(ciphertext.size());
	uint8_t prev[16]; for (int i = 0; i < 16; ++i) prev[i] = iv[i];
	uint8_t block[16], dec[16];
	for (size_t off = 0; off < ciphertext.size(); off += 16) {
		for (int i = 0; i < 16; ++i) block[i] = ciphertext[off + i];
		aes256_decrypt_block(ks, block, dec);
		for (int i = 0; i < 16; ++i) plaintext[off + i] = static_cast<uint8_t>(dec[i] ^ prev[i]);
		for (int i = 0; i < 16; ++i) prev[i] = block[i];
	}
	// PKCS#7 unpad
	if (plaintext.empty()) return false;
	uint8_t pad = plaintext.back();
	if (pad == 0 || pad > 16) return false;
	for (size_t i = 0; i < pad; ++i) {
		if (plaintext[plaintext.size() - 1 - i] != pad) return false;
	}
	plaintext.resize(plaintext.size() - pad);
	return true;
}

} // namespace purecrypto


