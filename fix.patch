 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/README.md b/README.md
index 6e26327e4852e50282add5a63e4d4450db0fc160..edf1da7c05e0a21b0fb8314b4144fc808fe844ed 100644
--- a/README.md
+++ b/README.md
@@ -3,50 +3,92 @@
 ## Prerequisites
 - A C++17-capable compiler (e.g., GCC 9+, Clang 10+, or MSVC 2019+)
 - CMake 3.16 or newer
 - (Optional) Ninja or Make if you prefer those generators
 
 ## Configure & Build (Linux/macOS)
 ```bash
 cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
 cmake --build build
 ```
 The resulting executable will be located at `build/pdf_password_retriever`. Run it with explicit options, for example:
 ```bash
 ./build/pdf_password_retriever --pdf secret.pdf --wordlist passwords.txt
 ```
 
 ## Configure & Build (Windows - x64)
 ```powershell
 cmake -S . -B build -A x64
 cmake --build build --config Release
 ```
 The Release binary will be generated at `build/Release/pdf_password_retriever.exe`. Execute it via PowerShell or CMD:
 ```powershell
 ./build/Release/pdf_password_retriever.exe --pdf secret.pdf --wordlist passwords.txt
 ```
 
+## Applying patches on Windows
+
+Whether you receive a `.patch` file via email or copy one from a pull request, the workflow for
+`git apply` on Windows is the same as on Linux/macOS‚Äîthe only difference is the shell you run it
+from. Git for Windows installs both **Git Bash** (a Unix-like shell) and the regular `git.exe`
+binary that you can use from PowerShell or CMD. Pick whichever environment you prefer and follow
+these steps:
+
+1. **Save the patch locally.** Download the attachment or paste the contents into a file, for
+   example `fix.patch`.
+2. **Open a shell with Git available.** Use Git Bash, PowerShell, or Command Prompt. If you choose
+   PowerShell/CMD, make sure Git for Windows is installed and its `bin` folder is on your `PATH`.
+3. **Change to the repository root.**
+   ```powershell
+   cd C:\path\to\Unlock-PDF
+   ```
+4. **Dry-run the patch (optional but recommended).** `--check` verifies the patch applies cleanly
+   without modifying your working tree.
+   ```powershell
+   git apply --check ..\downloads\fix.patch
+   ```
+5. **Apply the patch.** Drop `--check` once you are confident it will succeed. The same command
+   works in Git Bash (`/c/Users/.../fix.patch`) or PowerShell (`C:\Users\...\fix.patch`).
+   ```powershell
+   git apply ..\downloads\fix.patch
+   ```
+6. **Review the changes.** Use `git status` and `git diff` before committing.
+
+If the patch was copied to your clipboard, you can pipe it directly into `git apply` without saving
+an intermediate file:
+
+```powershell
+Get-Clipboard | git apply
+```
+
+For Git Bash, replace `Get-Clipboard` with `pbpaste` (if you have it installed) or create a file
+with `cat > fix.patch` and paste the contents manually before pressing <kbd>Ctrl</kbd>+<kbd>D</kbd>.
+
+When a patch fails because your working tree has diverged, try `git apply --reject` to generate
+`.rej` files you can review and merge by hand, or rebase/merge the latest changes before rerunning
+`git apply`.
+
 ## Hardware & Benchmark Utility
 The repository also ships with `device_probe`, a helper that prints basic system information and runs a configurable brute-force
 throughput benchmark. Build it alongside the main tool:
 
 ```bash
 cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
 cmake --build build --target device_probe
 ```
 
 Run the probe with optional flags to tweak the workload:
 
 ```bash
 ./build/device_probe --lengths 6,8,10 --attempts 750000 --hash sha256 --include-special
 ```
 
 To measure your hardware against the real password-check routine, point the probe at an encrypted PDF:
 
 ```bash
 ./build/device_probe --pdf secret.pdf --lengths 6,8 --attempts 2500
 ```
 
 The repository includes `Test1.pdf`, a small encrypted sample you can use to validate the "real" workload:
 
 ```bash
 ./build/device_probe --pdf Test1.pdf --lengths 6,8 --attempts 2500
diff --git a/sample_plain.pdf b/sample_plain.pdf
new file mode 100644
index 0000000000000000000000000000000000000000..ef1bc8bef1c1af08b67282a5eddb05948954a862
GIT binary patch
literal 993
zcmah|%We}f6a~};SYn3~Rc!7iYEne(c_kSXRcdBBYD7^&5>%;C7t_Q^2Tkp2#(|U_
zQa_;*P*~<8x?{<<;u8?0QrWQJ1F-WPwF|uQ%(3se$LHRgsk`1&EpH$V2=If~s9Z+a
z;R7Z>L-={njiGJGqsBhMFK9RLD|`rTA`#2B@_GqMrj{?+^0akwOaa&ZK8?}F2BNI1
z==20_?U=I7jtDrLaRT-Nu?=hxhLS*q?)WEsAOP1Gb$B>9VpBK<C9g40;`qW3c|Vax
zNnEODf-(_<IgP3Nk^G%AG-%8RQHRD*NK&fg2|g7%=ktP4&`4?xeL-E?;a!UG4rP6D
z2)3z$Vi8gQ2o1j&jXyv1OT*gDUPb8T<y)gg%<l%N->){0AKrbi`uKWvFZ;25e*Nk5
zlhaZ5aAj?r`Z-!(xwy!Uex-AxaVGsLb=DnU<<3T_508Ea>!;oKfA8J-dY=BK9GxYa
zd21y^R{WTHTs{+T)9?)yLB~gUi%GEo>jT~m*d~jEIe>6;a3CfHQ)QEto>osWBwSDq
zEnHCK<udj(P<b2j*|;9@PLm2~W7$Q3TXZP%SC6EXmD%ph_Ue9uwwR!Gq;skxT<I-j
z-Df({EsYR^6t$9W?&T6;!-)0}ff6E%1qI78Ea<@!vte=yY>C<O9cm>o&Axq4FW$yX
zQ+C3QSj&{ncmpfQNmyVa@`I2@lTm60@2HfF8=MPJ!yucu%6c4>3F_O0cG>d`+t?%?
qF|<O_D->PZa!t=8MMpQK8P3N4Z%q7+g&&EDO@)$yGMTNKhyDTN7Zbw(

literal 0
HcmV?d00001

diff --git a/scripts/create_sample_plain_pdf.py b/scripts/create_sample_plain_pdf.py
new file mode 100644
index 0000000000000000000000000000000000000000..106235972ded992e29a23cff7826465dc5b3e89a
--- /dev/null
+++ b/scripts/create_sample_plain_pdf.py
@@ -0,0 +1,18 @@
+"""Generate the unencrypted sample PDF used in manual encryption tests."""
+from pathlib import Path
+
+from fpdf import FPDF
+
+
+def main() -> None:
+    output = Path(__file__).resolve().parent.parent / "sample_plain.pdf"
+    pdf = FPDF()
+    pdf.add_page()
+    pdf.set_font("Arial", size=12)
+    pdf.multi_cell(0, 10, "Sample PDF for encryption tests.")
+    pdf.output(str(output))
+    print(f"Wrote {output}")
+
+
+if __name__ == "__main__":
+    main()
diff --git a/tests/README.md b/tests/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..6c25abc4eb08e5f2b76403eded7a20aec1560995
--- /dev/null
+++ b/tests/README.md
@@ -0,0 +1,44 @@
+# Encryption Test Assets
+
+This directory contains small helper assets that make it easy to manually verify the `pdf_password_retriever`
+executable against several PDF encryption handlers supported by the project.
+
+## Contents
+
+- `pdfs/` ‚Äì encrypted variants of a single-page sample PDF generated with [FPDF](https://pyfpdf.github.io/fpdf2/).
+  Each file uses `Secret1` as the user password and `OwnerSecret` as the owner password.
+  - `PDF_ENCRYPT_RC4_40.pdf` ‚Äì legacy RC4 security handler with a 40-bit key.
+  - `PDF_ENCRYPT_RC4_128.pdf` ‚Äì legacy RC4 handler upgraded to a 128-bit key.
+  - `PDF_ENCRYPT_AES_128.pdf` ‚Äì AES-128 encryption (Revision 4 / AESV2 crypt filter).
+  - `PDF_ENCRYPT_AES_256_CBC.pdf` ‚Äì AES-256 encryption (Revision 6 / AESV3 crypt filter).
+- `wordlists/` ‚Äì lightweight wordlist used for smoke tests (`Secret1` is included among a few decoy entries).
+
+## Regenerating the PDFs
+
+The encrypted files can be reproduced with [qpdf](https://qpdf.sourceforge.io/) using the commands below. Start by
+regenerating `sample_plain.pdf`, the unencrypted base document produced by the FPDF script in the repository root.
+Install the Python dependency once (FPDF v2) and then run the helper:
+
+```bash
+python -m pip install --user fpdf2
+python scripts/create_sample_plain_pdf.py
+```
+
+Then run the following commands to create the encrypted variants:
+
+```bash
+# RC4 (40-bit)
+qpdf --allow-weak-crypto --encrypt Secret1 OwnerSecret 40 -- sample_plain.pdf tests/pdfs/PDF_ENCRYPT_RC4_40.pdf
+
+# RC4 (128-bit)
+qpdf --allow-weak-crypto --encrypt Secret1 OwnerSecret 128 --use-aes=n -- sample_plain.pdf tests/pdfs/PDF_ENCRYPT_RC4_128.pdf
+
+# AES-128
+qpdf --encrypt Secret1 OwnerSecret 128 --use-aes=y -- sample_plain.pdf tests/pdfs/PDF_ENCRYPT_AES_128.pdf
+
+# AES-256 (CBC/AESV3)
+qpdf --encrypt Secret1 OwnerSecret 256 -- sample_plain.pdf tests/pdfs/PDF_ENCRYPT_AES_256_CBC.pdf
+```
+
+> **Note:** qpdf 11.9.0 cannot generate PDF 2.0 AES-GCM, RMS/LiveCycle, or vendor-specific custom security handlers.
+> Those formats are therefore not included in this quick regression set.
diff --git a/tests/pdfs/PDF_ENCRYPT_AES_128.pdf b/tests/pdfs/PDF_ENCRYPT_AES_128.pdf
new file mode 100644
index 0000000000000000000000000000000000000000..b829b4963869660e5a152aeaaf5d4d1e84056651
--- /dev/null
+++ b/tests/pdfs/PDF_ENCRYPT_AES_128.pdf
@@ -0,0 +1,43 @@
+%PDF-1.6
+%
+1 0 obj
+<< /OpenAction [ 3 0 R /FitH null ] /PageLayout /OneColumn /Pages 4 0 R /Type /Catalog >>
+endobj
+2 0 obj
+<< /CreationDate <86dfda74fa27c42574317724c88ed13536577d3e53fe9f81eb71b588fcd9eec16ee1a493d9ab244d084d53a0b09d3ede> /Producer <5f62b9df98ef168f3985e9de0576b06c2e898ac55e45f284c82f74bf2094688665c1331f7430974bd1ed259eab00dedcfee8bd6b2b3e7e01f8634e9222639877> >>
+endobj
+3 0 obj
+<< /Contents 5 0 R /Parent 4 0 R /Resources 6 0 R /Type /Page >>
+endobj
+4 0 obj
+<< /Count 1 /Kids [ 3 0 R ] /MediaBox [ 0 0 595.28 841.89 ] /Type /Pages >>
+endobj
+5 0 obj
+<< /Filter /FlateDecode /Length 112 >>
+stream
+mI~b}h M{SÔæüÃßO{CXJe.L'$–ê8A`XAEby;*h3X:fG“íZendstream
+endobj
+6 0 obj
+<< /Font << /F1 7 0 R >> /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] /XObject << >> >>
+endobj
+7 0 obj
+<< /BaseFont /Helvetica /Encoding /WinAnsiEncoding /Subtype /Type1 /Type /Font >>
+endobj
+8 0 obj
+<< /CF << /StdCF << /AuthEvent /DocOpen /CFM /AESV2 /Length 16 >> >> /Filter /Standard /Length 128 /O <f91b279df8b0169f9092d4653a76431b083723a3ce6d7616551d4bdb14382746> /P -4 /R 4 /StmF /StdCF /StrF /StdCF /U <0a627d77259ab86e701ab886c00bf3ea0122456a91bae5134273a6db134c87c4> /V 4 >>
+endobj
+xref
+0 9
+0000000000 65535 f 
+0000000015 00000 n 
+0000000120 00000 n 
+0000000395 00000 n 
+0000000475 00000 n 
+0000000566 00000 n 
+0000000749 00000 n 
+0000000855 00000 n 
+0000000952 00000 n 
+trailer << /Info 2 0 R /Root 1 0 R /Size 9 /ID [<c64d6a276afff2f6c89c17acdf4e4474><c64d6a276afff2f6c89c17acdf4e4474>] /Encrypt 8 0 R >>
+startxref
+1251
+%%EOF
diff --git a/tests/pdfs/PDF_ENCRYPT_AES_256_CBC.pdf b/tests/pdfs/PDF_ENCRYPT_AES_256_CBC.pdf
new file mode 100644
index 0000000000000000000000000000000000000000..a831bd6763dad24488d4cc7992df0b5e5de5f5cb
GIT binary patch
literal 1911
zcmah~O^6&t6c#->2<pLuhhPQVOElY6UH`HK_HRtchTZI#sKgxV=hbH7Y<KACSvGp{
zF6JaTs%S1kRPZ3^B@r<P55bFvpeP<acwP)BzM9#YT@t~WVY>VEtM^`g-}_$8ZLD;U
zvw7W_yS4Z6KOIIWsr}{7!U8E)cU!22{kj^G{J6NXv^u_7azi)|O@2cPTzbfJ4R&Ba
z3^{Qk|BCf1P%VZwJ6<3hLvNCz+iy>jYBU&-i=^0aTd?M?)}t1kD_E`vqiqbD%|jw4
z3tqW;1xT^%S~sY-Fl+~^m`f}VmAc%3%V}0z3uM7N;3hbqtTRzXO@j$MFs_+Tfu)!L
zv@_m@(lBndU?Ii;jE10Wpf1spX^39N6jTtNNy(x$$(Nv<wa((sHkvw)0yJd7P{oAy
zTzLpOKysd0uO&+oV~NN(Ph7-UMy`?+G?gkDos<K`O9h%UNVe2bc;_|OHaPBdP~16{
zqR<pQzyMgItO`z3riHMS+i0n#rJz0|J%uDgJY{dWu8_WVNaO^@4cFk~6x2-^)}tmM
z%IYx68Tdo-G6M(kM!1}j;&eX_XLKTmXCU_7QoV~dieG8vd})XgY~I++@r1t#r3a<v
zs-~g4{XvUR7Tp2Tw*sM#Ncb95TkR#nSeXkNw#e{y=d;VdJab3-$9L!>kG}N9#T)My
zcaD7j!Q1xIk9$ww{^6U?ul;=O^y>3(e0RM$;^52m`KNxnp>JP5_WQT*oxQ0)s=j*e
z=*Ige_3+rOC-%<Xd-H{RPwu_=>DJbt=k5;Qx&QTFcgauXAD^uK{ULw$=40!>zI^m`
zY_<K&`%Rb8nw5<Rj|I_XM5BEZ3mtbx=s}BU6eum+KI~$1pV~%bm-esA``1$$p4Zm>
zWeDRyW7SN#%n_%Vvf{cqTX7NwJJ9xnL(x?TRKMCH#jE{l5rukS=#6|kR!znpDVtC*
zj&Q($Ih0_zJKjjIjr(_tqxRD3PHvcDr4CugD8cR-oC2%8^L)k*&*Y4^J>{_1x+=OR
z&Rj~VP}^jIIR{h;fYJz?P#)k@>4Q|!(*RnT5M|Ixlr$yIl1dzs04FK+OqT(0X`o6$
zP>M&JxMLzx<3!0guJw?|4bG>ik}}RkZ6yyn1<EMpP{t(72&jH5f<gVc5TGobRsp;!
zjgEmk%eYUOL2_K+KQ!Ao_yWWD$r+dR#%MAehYD3mXs56yjsBacp`zDrBiR!G@zNYT
zoFfa=qcf^JQ0-;l)=;UeOSp>^giKrt>2#7zIBylRG*~XQaX7T3=U#HGkW<EmjLb<-
zd5KYQmq2+m;H|?V&f(q>Q5h1H-e|5clc5fz!^k-LG&ic0CaHk44F{nUAW|}v25l4$
zA!=0)a~{XVL5u7*kUEsu4xN37l9Ef3$jru2%K1a8nT;9L$pbc_@N9X&CdI=x9E%V6
zng7UP%ZJu7%CM=YIoihc2YEu{*>$Q)HOU7C9zdIQo#)v2zSn;Xh{g9S<idhUf&v?N
y1~!6r8hFHsj}24G1SX#Ne-G3%s<63wrNu*VG7)fexuzW>$)u8<xw+N#Zs%WcKPC$R

literal 0
HcmV?d00001

diff --git a/tests/pdfs/PDF_ENCRYPT_RC4_128.pdf b/tests/pdfs/PDF_ENCRYPT_RC4_128.pdf
new file mode 100644
index 0000000000000000000000000000000000000000..6e93b6b4ab17ef0c0f619bdd1e0ff956d88bf71c
--- /dev/null
+++ b/tests/pdfs/PDF_ENCRYPT_RC4_128.pdf
@@ -0,0 +1,43 @@
+%PDF-1.4
+%
+1 0 obj
+<< /OpenAction [ 3 0 R /FitH null ] /PageLayout /OneColumn /Pages 4 0 R /Type /Catalog >>
+endobj
+2 0 obj
+<< /CreationDate <b31bc65d2677253b62ba5b4d1ca2dfc2> /Producer <a758b23d5004343a7cbe454909ff9e875a86df3a9c6564d13baacbc93d7c3db2c2735d8e0e6460459dd5> >>
+endobj
+3 0 obj
+<< /Contents 5 0 R /Parent 4 0 R /Resources 6 0 R /Type /Page >>
+endobj
+4 0 obj
+<< /Count 1 /Kids [ 3 0 R ] /MediaBox [ 0 0 595.28 841.89 ] /Type /Pages >>
+endobj
+5 0 obj
+<< /Filter /FlateDecode /Length 94 >>
+stream
++'3?W≈è^0l=k,&	"j^'%B)N&($…•wDpq]VlNzendstream
+endobj
+6 0 obj
+<< /Font << /F1 7 0 R >> /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] /XObject << >> >>
+endobj
+7 0 obj
+<< /BaseFont /Helvetica /Encoding /WinAnsiEncoding /Subtype /Type1 /Type /Font >>
+endobj
+8 0 obj
+<< /Filter /Standard /Length 128 /O <f91b279df8b0169f9092d4653a76431b083723a3ce6d7616551d4bdb14382746> /P -4 /R 3 /U <b9cdd2a6991fecac7514f8c34bbf3cd80122456a91bae5134273a6db134c87c4> /V 2 >>
+endobj
+xref
+0 9
+0000000000 65535 f 
+0000000015 00000 n 
+0000000120 00000 n 
+0000000287 00000 n 
+0000000367 00000 n 
+0000000458 00000 n 
+0000000622 00000 n 
+0000000728 00000 n 
+0000000825 00000 n 
+trailer << /Info 2 0 R /Root 1 0 R /Size 9 /ID [<b25af996ebf42fdcbe63f79596d3e2bb><b25af996ebf42fdcbe63f79596d3e2bb>] /Encrypt 8 0 R >>
+startxref
+1032
+%%EOF
diff --git a/tests/pdfs/PDF_ENCRYPT_RC4_40.pdf b/tests/pdfs/PDF_ENCRYPT_RC4_40.pdf
new file mode 100644
index 0000000000000000000000000000000000000000..c59cdc42c6a1cb0b0c4137fb1b3f09702b065541
--- /dev/null
+++ b/tests/pdfs/PDF_ENCRYPT_RC4_40.pdf
@@ -0,0 +1,43 @@
+%PDF-1.3
+%
+1 0 obj
+<< /OpenAction [ 3 0 R /FitH null ] /PageLayout /OneColumn /Pages 4 0 R /Type /Catalog >>
+endobj
+2 0 obj
+<< /CreationDate <40d1655be4cf193eb32b4cd648576014> /Producer <5492113b92bc083fad2f52d25d0a2151c1683ffdacb85d1cfad32412bd6a8b64cb5967b804833046bfdc> >>
+endobj
+3 0 obj
+<< /Contents 5 0 R /Parent 4 0 R /Resources 6 0 R /Type /Page >>
+endobj
+4 0 obj
+<< /Count 1 /Kids [ 3 0 R ] /MediaBox [ 0 0 595.28 841.89 ] /Type /Pages >>
+endobj
+5 0 obj
+<< /Filter /FlateDecode /Length 94 >>
+stream
+UQ_`∆Çblw*Rl'CP/~'BysAﬁü…É?@%Fg{sQ¥≠Ωvq.endstream
+endobj
+6 0 obj
+<< /Font << /F1 7 0 R >> /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] /XObject << >> >>
+endobj
+7 0 obj
+<< /BaseFont /Helvetica /Encoding /WinAnsiEncoding /Subtype /Type1 /Type /Font >>
+endobj
+8 0 obj
+<< /Filter /Standard /Length 40 /O <d5b615253b73b0e810fd2529ae1a9bcc97c0438940242d4564ddcb93dcecce56> /P -4 /R 2 /U <effdbea7a832bbdb820d3ddd027d5ffc1c895fd0c441d552b6de82ce812ccd91> /V 1 >>
+endobj
+xref
+0 9
+0000000000 65535 f 
+0000000015 00000 n 
+0000000120 00000 n 
+0000000287 00000 n 
+0000000367 00000 n 
+0000000458 00000 n 
+0000000622 00000 n 
+0000000728 00000 n 
+0000000825 00000 n 
+trailer << /Info 2 0 R /Root 1 0 R /Size 9 /ID [<c6dfefcf6ab8341c977084653589e98f><c6dfefcf6ab8341c977084653589e98f>] /Encrypt 8 0 R >>
+startxref
+1031
+%%EOF
diff --git a/tests/wordlists/test_passwords.txt b/tests/wordlists/test_passwords.txt
new file mode 100644
index 0000000000000000000000000000000000000000..9c9885c8687a9353334cb9b53df48c44672aa43d
--- /dev/null
+++ b/tests/wordlists/test_passwords.txt
@@ -0,0 +1,5 @@
+password
+123456
+letmein
+Secret1
+passw0rd
 
EOF
)
